/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { UPIAuthorizeDetails } from "./upiauthorizedetails";
import { Expose, Type } from "class-transformer";

/**
 * Specify the channel through which the payment must be processed. Can be one of ["link", "collect", "qrcode"]
 */
export enum UpiChannel {
    Link = "link",
    Collect = "collect",
    Qrcode = "qrcode",
}

export class Upi extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "authorization" })
    @Type(() => UPIAuthorizeDetails)
    authorization?: UPIAuthorizeDetails;

    /**
     * For one time mandate on UPI. Set this as authorize_only = true. Please note that you can only use the "collect" channel if you are sending a one time mandate request
     */
    @SpeakeasyMetadata()
    @Expose({ name: "authorize_only" })
    authorizeOnly?: boolean;

    /**
     * Specify the channel through which the payment must be processed. Can be one of ["link", "collect", "qrcode"]
     */
    @SpeakeasyMetadata()
    @Expose({ name: "channel" })
    channel: UpiChannel;

    /**
     * The UPI request will be valid for this expiry minutes. This parameter is only applicable for a UPI collect payment. The default value is 5 minutes. You should keep the minimum as 5 minutes, and maximum as 15 minutes
     */
    @SpeakeasyMetadata()
    @Expose({ name: "upi_expiry_minutes" })
    upiExpiryMinutes?: number;

    /**
     * Customer UPI VPA to process payment.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "upi_id" })
    upiId?: string;
}
